b <- -t(XU[1:(n-p-i),1:(p+i)]) %*% XU[1:(n-p-i),(p+i+1)]
XU[(n-p-i+1):n,(p+i+1)] <- solve(a=A,b=b)
}
return (XU[,((p+1):(2*p))])
}
U <- ortho(X)
t(scale(U)) %*% scale(X)
U <- ortho(X)
U %*% X
t(U) %*% X
U <- ortho(X)
t(U) %*% X
X <- genedata(500,3,3,0.5)$X
U <- ortho(X)
t(U) %*% X
matrix(1,n,p)
t(X) %*% U
X <- genedata(10,3,3,0.5)$X
U <- ortho(X)
t(X) %*% U
X <- genedata(10,3,3,0.5)$X
U <- ortho(X)
t(X) %*% U
U
X
ortho <- function(X){
n <- dim(X)[1]
p <- dim(X)[2]
if(n < 2*p){return (0)}
U <- matrix(1,n,p)
XU <- cbind(X,U)
for(i in (1:p -1)){
A <- XU[(n-p-i+1):n, 1:(p+i)]
b <- -(t(XU[1:(n-p-i),1:(p+i)]) %*% XU[1:(n-p-i),(p+i+1)])
XU[(n-p-i+1):n,(p+i+1)] <- solve(a=A,b=b)
}
return (XU[,((p+1):(2*p))])
}
X <- genedata(10,3,3,0.5)$X
U <- ortho(X)
t(X) %*% U
X <- genedata(100,3,3,0.5)$X
U <- ortho(X)
t(X) %*% U
X <- genedata(10,3,3,0.5)$X
U <- ortho(X)
t(X) %*% U
U
XU[1:(n-p-i),1:(p+i)]
XU
ortho <- function(X){
n <- dim(X)[1]
p <- dim(X)[2]
if(n < 2*p){return (0)}
U <- matrix(1,n,p)
XU <- cbind(X,U)
for(i in (1:p -1)){
A <- XU[(n-p-i+1):n, 1:(p+i)]
b <- -(t(XU[1:(n-p-i),1:(p+i)]) %*% XU[1:(n-p-i),(p+i+1)])
XU[(n-p-i+1):n,(p+i+1)] <- solve(a=t(A),b=b)
}
return (XU[,((p+1):(2*p))])
}
X <- genedata(10,3,3,0.5)$X
U <- ortho(X)
t(X) %*% U
augment <- function(X){
n <- dim(X)[1]
p <- dim(X)[2]
U <- ortho(X)
X.norm <- scale(X)
U.norm <- scale(U)
sigma <- t(X.norm) %*% X.norm
sigma.inv <- solve(sigma)
s <- min(1, 2*min(eigen(sigma)$values)) * rep(1, p) - 0.0001
C <- chol(2*diag(s) - diag(s)%*%sigma.inv%*%diag(s))
X.tilde <- X %*% (diag(rep(1,p)) - sigma.inv %*%diag(s)) + U.norm %*% C
return (X.tilde)
}
X.tilde <- augment(X)
cor(X)
cor(X.tilde)
X.tilde <- augment(X)
cor(X)
cor(X.tilde)
ortho <- function(X){
n <- dim(X)[1]
p <- dim(X)[2]
if(n < 2*p){return (0)}
U <- matrix(1,n,p)
XU <- cbind(X,U)
for(i in (1:p -1)){
A <- XU[(n-p-i+1):n, 1:(p+i)]
b <- -(t(XU[1:(n-p-i),1:(p+i)]) %*% XU[1:(n-p-i),(p+i+1)])
XU[(n-p-i+1):n,(p+i+1)] <- solve(a=t(A),b=b)
}
return (XU[,((p+1):(2*p))])
}
X <- genedata(10,3,3,0.5)$X
U <- ortho(X)
t(X) %*% U
U
t(X) %*% U
X
X%%2
X^2
sum(X^2)
sum(X^2[,])
colsum(X^2)
norm(X)
sqrt(sum(X^2))
?`norm
?norm
end
?norm
norm(X, 2)
X
norm(x, 2)
norm(X, 2)
norm(X, "O")
?norm
norm(X, "2")
Hilbert(9)
colSums(X)
colSums(X^2)
sqrt(colSums(X^2))
X / sqrt(colSums(X^2))
test <- X / sqrt(colSums(X^2))
colSums(test^2)
X
X^
2
0.7394380^2
1.5195119^@
1.5195119^2
normer <- sqrt(colSums(X^2))
X / normer
X.norm <- X / normer
sigma <- t(X.norm) %*% X.norm
sigma
X.norm <- scale(X)
U.norm <- scale(U)
sigma <- t(X.norm) %*% X.norm
sigma
normer <- sqrt(colSums(X^2))
X.norm <- X / normer
sigma <- t(X.norm) %*% X.norm
sigma
X <- genedata(100,3,3,0.5)$X
U <- ortho(X)
t(X) %*% U
augment <- function(X){
n <- dim(X)[1]
p <- dim(X)[2]
U <- ortho(X)
X.norm <- scale(X)
U.norm <- scale(U)
sigma <- t(X.norm) %*% X.norm
sigma.inv <- solve(sigma)
s <- min(1, 2*min(eigen(sigma)$values)) * rep(1, p) - 0.0001
C <- chol(2*diag(s) - diag(s)%*%sigma.inv%*%diag(s))
X.tilde <- X %*% (diag(rep(1,p)) - sigma.inv %*%diag(s)) + U.norm %*% C
return (X.tilde)
}
normer <- sqrt(colSums(X^2))
X.norm <- X / normer
t(X.norm) %*% X.norm
t(X.norm) %*% X.norm
X <- genedata(100,3,3,0.5)$X
normer <- sqrt(colSums(X^2))
X.norm <- X / normer
t(X.norm) %*% X.norm
sqrt(colSums(X^2))
X.norm
t(X.norm) %*% X.norm
X <- genedata(100,3,3,0.5)$X
normer <- sqrt(colSums(X*X))
X.norm <- X / normer
t(X.norm) %*% X.norm
normer <- sqrt(colSums(X^2))
X.norm <- X / normer
t(X.norm) %*% X.norm
X <- genedata(100,3,3,0.5)$X
normer <- sqrt(colSums(X^2))
X.norm <- X / normer
t(X.norm) %*% X.norm
X <- genedata(1000,3,3,0.5)$X
normer <- sqrt(colSums(X^2))
X.norm <- X / normer
t(X.norm) %*% X.norm
normer <- sqrt(colSums(X*X))
X.norm <- X / normer
t(X.norm) %*% X.norm
augment <- function(X){
n <- dim(X)[1]
p <- dim(X)[2]
U <- ortho(X)
X.norm <- X / sqrt(colSums(X^2))
U.norm <- U / sqrt(colSums(U^2))
sigma <- t(X.norm) %*% X.norm
sigma.inv <- solve(sigma)
s <- min(1, 2*min(eigen(sigma)$values)) * rep(1, p) - 0.0001
C <- chol(2*diag(s) - diag(s)%*%sigma.inv%*%diag(s))
X.tilde <- X %*% (diag(rep(1,p)) - sigma.inv %*%diag(s)) + U.norm %*% C
return (X.tilde)
}
X.tilde <- augment(X)
cor(X)
cor(X.tilde)
X.tilde <- augment(X)
cor(X)
cor(X.tilde)
cor(cbind(X,X.tilde))
cor(X)
cor(X.tilde)
X.norm <- X / sqrt(colSums(X^2))
U.norm <- U / sqrt(colSums(U^2))
X.norm
X <- genedata(10,3,3,0.5)$X
normer <- sqrt(colSums(X*X))
X.norm <- X / normer
t(X.norm) %*% X.norm
X <- genedata(10,3,3,0.5)$X
normer <- sqrt(colSums(X*X))
X.norm <- X / normer
t(X.norm) %*% X.norm
X <- genedata(10,3,3,0.5)$X
normer <- sqrt(colSums(X*X))
X.norm <- X / normer
t(X.norm) %*% X.norm
X <- genedata(1000,3,3,0.5)$X
normer <- sqrt(colSums(X*X))
X.norm <- X / normer
t(X.norm) %*% X.norm
genedata <- function(n,k,p,rou){
sigma <- matrix(0, p, p)
for (i in 1:p){
for (j in 1:p){
sigma[i,j] <- rou^abs(i-j)
}
}
beta <- 5*sample(c(rep(1, k),rep(0, p-k)))
X <- mvrnorm(n=n, mu=rep(0, p), sigma)
U <- runif(n, min = 0, max = 2*pi)
error <- rnorm(n,mean=0,sd=1)
y <- X %*% beta + 10*sin(U) + error
y <- unlist(y)
return ( list(X = X,U = U,y = y) )
}
X <- genedata(100,3,3,0.5)$X
U <- ortho(X)
t(X) %*% U
X <- genedata(10,3,3,0.5)$X
normer <- sqrt(colSums(X*X))
X.norm <- X / normer
t(X.norm) %*% X.norm
cor(X)
genedata <- function(n,k,p,rou){
sigma <- matrix(0, p, p)
for (i in 1:p){
for (j in 1:p){
sigma[i,j] <- rou^abs(i-j)
}
}
beta <- 5*sample(c(rep(1, k),rep(0, p-k)))
X <- mvrnorm(n=n, mu=rep(0, p), sigma)
U <- runif(n, min = 0, max = 2*pi)
error <- rnorm(n,mean=0,sd=1)
y <- X %*% beta + 10*sin(U) + error
y <- unlist(y)
return ( list(X = X,U = U,y = y) )
}
X <- genedata(100,3,3,0.5)$X
cor(X)
X <- genedata(100,3,5,0.5)$X
cor(X)
X <- genedata(100,3,5,0.5)$X
cor(X)
X <- genedata(1000,3,5,0.5)$X
cor(X)
X <- genedata(10000,3,5,0.5)$X
cor(X)
X <- genedata(100000,3,5,0.5)$X
cor(X)
X <- genedata(10000,3,3,0.5)$X
normer <- sqrt(colSums(X*X))
X.norm <- X / normer
t(X.norm) %*% X.norm
augment <- function(X){
n <- dim(X)[1]
p <- dim(X)[2]
U <- ortho(X)
X.norm <- X / sqrt(colSums(X^2))
U.norm <- U / sqrt(colSums(U^2))
sigma <- t(X.norm) %*% X.norm
sigma.inv <- solve(sigma)
s <- min(1, 2*min(eigen(sigma)$values)) * rep(1, p) - 0.0001
C <- chol(2*diag(s) - diag(s)%*%sigma.inv%*%diag(s))
X.tilde <- X %*% (diag(rep(1,p)) - sigma.inv %*%diag(s)) + U.norm %*% C
return (X.tilde)
}
X.tilde <- augment(X)
cor(X)
cor(X.tilde)
t(X.norm) %*% X.norm
min(1, 2*min(eigen(sigma)$values)) * rep(1, p) - 0.0001
X.tilde <- augment(X)
X.tilde
X <- genedata(10,3,3,0.5)$X
X.tilde <- augment(X)
X.tilde
X <- genedata(10,3,3,0.5)$X
cor(X)
U <- ortho(X)
t(X) %*% U
write.csv(X, file = "X.csv", row.names = FALSE)
cor(X)
U <- ortho(X)
U
t(X) %*% U
X.norm <- X / sqrt(colSums(X^2))
X.norm
U.norm <- U / sqrt(colSums(U^2))
U.norm
sqrt(colSums(U^2))
U / sqrt(colSums(U^2))
U
X.norm <- X / sqrt(colSums(X^2))
X.norm
X.norm
sqrt(colSums(X^2))
t(X)
t(sqrt(colSums(X^2)))
X.norm <- t(X) / sqrt(colSums(X^2))
X.norm
t(X.norm)
X.norm <- t( t(X)/sqrt(colSums(X^2)) )
X.norm
sqrt(colSums(X^2)
)
t(X.norm) %*% X.norm
X.norm
t(X.norm) %*% X.norm
U.norm <- U / sqrt(colSums(U^2))
U.norm
U.norm <- t( t(U)/sqrt(colSums(U^2)) )
U.norm
augment <- function(X){
n <- dim(X)[1]
p <- dim(X)[2]
U <- ortho(X)
X.norm <- t( t(X)/sqrt(colSums(X^2)) )
U.norm <- t( t(U)/sqrt(colSums(U^2)) )
sigma <- t(X.norm) %*% X.norm
sigma.inv <- solve(sigma)
s <- min(1, 2*min(eigen(sigma)$values)) * rep(1, p) - 0.0001
C <- chol(2*diag(s) - diag(s)%*%sigma.inv%*%diag(s))
X.tilde <- X %*% (diag(rep(1,p)) - sigma.inv %*%diag(s)) + U.norm %*% C
return (X.tilde)
}
X.tilde <- augment(X)
cor(X)
cor(X.tilde)
sigma <- t(X.norm) %*% X.norm
sigma
sigma.inv
t(sigma) %*% sigma.inv
sigma.inv <- solve(sigma)
t(sigma) %*% sigma.inv
s <- min(1, 2*min(eigen(sigma)$values)) * rep(1, p) - 0.0001
s
C <- chol(2*diag(s) - diag(s)%*%sigma.inv%*%diag(s))
C
X.tilde <- X %*% (diag(rep(1,p)) - sigma.inv %*%diag(s)) + U.norm %*% C
X.tilde
U.norm %*% C
C
U.norm
(diag(rep(1,p)) - sigma.inv %*%diag(s))
X %*% (diag(rep(1,p)) - sigma.inv %*%diag(s))
t(X)%*% (diag(rep(1,p)) - sigma.inv %*%diag(s))
X %*% (diag(rep(1,p)) - sigma.inv %*%diag(s))
(diag(rep(1,p)) - sigma.inv %*%diag(s)
)
X.tilde <- X.norm %*% (diag(rep(1,p)) - sigma.inv %*%diag(s)) + U.norm %*% C
X.tilde
augment <- function(X){
n <- dim(X)[1]
p <- dim(X)[2]
U <- ortho(X)
X.norm <- t( t(X)/sqrt(colSums(X^2)) )
U.norm <- t( t(U)/sqrt(colSums(U^2)) )
sigma <- t(X.norm) %*% X.norm
sigma.inv <- solve(sigma)
s <- min(1, 2*min(eigen(sigma)$values)) * rep(1, p) - 0.0001
C <- chol(2*diag(s) - diag(s)%*%sigma.inv%*%diag(s))
X.tilde <- X.norm %*% (diag(rep(1,p)) - sigma.inv %*%diag(s)) + U.norm %*% C
return (X.tilde)
}
X.tilde <- augment(X)
cor(X)
cor(X.tilde)
cbind(X,X.tilde)
source('genedata.R')
source('nonparam.R')
source('knockoff.R')
p <- 5
k <- 2
n <- 30
rou <- 0.5
data <- genedata(n,k,p,rou)
X <- data$X
U <- data$U
y <- data$y
X.tilde <- augment(X)
cor(X)
cor(X.tilde)
data <- genedata(n,k,p,rou)
X <- data$X
U <- data$U
y <- data$y
X.tilde <- augment(X)
cor(X)
cor(X.tilde)
n <- 30000
rou <- 0.5
data <- genedata(n,k,p,rou)
X <- data$X
U <- data$U
y <- data$y
X.tilde <- augment(X)
cor(X)
cor(X.tilde)
n <- 3000
data <- genedata(n,k,p,rou)
X <- data$X
rou <- 0.5
y <- data$y
U <- data$U
X.tilde <- augment(X)
cor(X)
cor(X.tilde)
XX <- cbind(X,X.tilde)
XX
g1 <- nonparam(U,y,U,0.3,"spline")
g2 <- 0*X
for (i in 1:p){
g2[,i] <- nonparam(U,X[,i],U,0.3,"spline")
}
g
g2 <- 0*XX
for (i in 1:p){
g2[,i] <- nonparam(U,XX[,i],U,0.3,"spline")
}
g2
X
source('genedata.R')
p <- 5
k <- 2
n <- 3000
rou <- 0.5
data <- genedata(n,k,p,rou)
X <- data$X
XX <- augment(X)
U <- data$U
y <- data$y
dim(X)
dim(XX)
g1 <- nonparam(U,y,U,0.3,"spline")
g2 <- 0*XX
for (i in 1:p){
g2[,i] <- nonparam(U,XX[,i],U,0.3,"spline")
}
g2
X
XX
XX
knockoff(XX-g2,y-g1)
lambda_list
feature_index
seleted <- feature_index[1:2]
seleted
X
X[,selected]
selected <- feature_index[1:2]
X[,selected]
model <- lm((y-g1)~X[,selected])
model
predict(model,X[,selected])
predict(model,as.data.frame(X[,selected]))
y.hat <- predict(model,as.data.frame(X[,selected]))
plot(y,y.hat)
plot(y,y.hat+g1)
6*0.2
int(6*0.2)
floor(6*0.2)
num.select <- max(1,floor(q*p))
q <- 0.2
num.select <- max(1,floor(q*p))
selected <- feature_index[1:num.select]
X[,selected]
selected
model <- lm((y-g1)~X[,selected])
y.hat <- predict(model,as.data.frame(X[,selected]))
plot(y,y.hat+g1)
q <- 0.5
num.select <- max(1,floor(q*p))
selected <- feature_index[1:num.select]
X[,selected]
model <- lm((y-g1)~X[,selected])
y.hat <- predict(model,as.data.frame(X[,selected]))
plot(y,y.hat+g1)
